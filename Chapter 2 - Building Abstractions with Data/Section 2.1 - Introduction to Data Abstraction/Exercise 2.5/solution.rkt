#lang sicp

(define (square a)
  (* a a))
(define (halve a)
  (/ a 2))
(define (even? a)
  (= (remainder a 2) 0))
(define (expt n b)
  (define (iter res n b)
    (cond ((= n 0) res)
          ((even? n) (iter res (halve n) (square b)))
          (else (iter (* res b) (- n 1) b))))
  (iter 1 n b))

(define (create-term a b)
  (if (and (> a 0) (> b 0))
      (lambda (n)
        (let ((value (* (expt a 2) (expt b 3))))
          (cond ((= n 0) value)
                ((= n 1) a)
                ((= n 2) b)
                (else (error "n does not correspond to constructor or selector: " n)))))
      (error "The values for the exponents are not nonnegative:" a b)))
(define (cons a b) (create-term a b))
(define (car z) (z 1))
(define (cdr z) (z 2))
(define (term z) (z 0))
(define (print-term z)
  (newline)
  (display "(")
  (display (car z))
  (display ", ")
  (display (cdr z))
  (display ", ")
  (display (term z))
  (display ")"))

(define test-term-1 (create-term 1 2))
(define test-term-2 (create-term 4 5))
(print-term test-term-1)
(print-term test-term-2)
(define test-term-3 (create-term -1 -2))
(print-term test-term-3)