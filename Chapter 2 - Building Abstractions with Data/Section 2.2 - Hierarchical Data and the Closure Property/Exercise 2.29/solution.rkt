#lang sicp

(define (make-mobile left right)
  (list left right))
(define (left-branch mobile)
  (car mobile))
(define (right-branch mobile)
  (car (cdr mobile)))
(define (mobile? m)
  (and (pair? m)
       (branch? (left-branch m))
       (branch? (right-branch m))))

(define (make-branch length structure)
  (list length structure))
(define (branch-length branch)
  (car branch))
(define (branch-structure branch)
  (car (cdr branch)))
(define (branch? b)
  (and (pair? b)
       (not (pair? (branch-length b)))))

(define (torque branch)
  (* (branch-length branch)
     (total-weight branch)))

(define (total-weight m)
  (cond ((mobile? m)
         (+ (total-weight (left-branch m))
                        (total-weight (right-branch m))))
        ((and (branch? m)
              (mobile? (branch-structure m)))
         (total-weight (branch-structure m)))
        (else (branch-structure m))))

(define (balanced? m)
  (cond ((mobile? m)
         (and (= (torque (left-branch m))
                 (torque (right-branch m)))
              (balanced? (left-branch m))
              (balanced? (right-branch m))))
        ((and (branch? m)
              (mobile? (branch-structure m)))
         (balanced? (branch-structure m)))
        (else #t)))

(define m1 (make-mobile (make-branch 4 6)
                        (make-branch 5
                                     (make-mobile (make-branch 3 7)
                                                  (make-branch 9 8)))))
(define m2 (make-mobile (make-branch 4 6)
                        (make-branch 2
                                     (make-mobile (make-branch 5 8)
                                                  (make-branch 10 4))))) 
(define b1 (make-branch 3 m1))
(total-weight m1)
(torque b1)
(balanced? m1)
(balanced? m2)