#lang sicp

(define (prime? n)
  (define (expmod base exp)
    (define (even? n)
      (= (remainder n 2) 0))
    (define (square n)
      (* n n))
    (define (non-trivial-square-mod a)
      (define (non-trivial? a)
        (and (not (or (= a 1)
                      (= a (- n 1))))
             (= (remainder (square a) n)
                1)))
      (if (non-trivial? a)
          0
          (remainder (square a) n)))
    (cond ((= exp 0) 1)
          ((even? exp)
           (non-trivial-square-mod (expmod base (/ exp 2))))
          (else
           (remainder (* base (expmod base (- exp 1)))
                      n))))
  (define (miller-rabin-test)
    (define (try-it count)
      (cond ((= count 0) #t)
            ((= (expmod (+ (random (- n 1)) 1)
                        (- n 1))
                1)
             (try-it (- count 1)))
            (else #f)))
    (try-it 5))
  (miller-rabin-test))

(prime? 3)
(prime? 11)
(prime? 21)
(prime? 1105)
(prime? 1729)